import boto3

# AWS credentials
AWS_ACCESS_KEY = '' #removing for GitHub
AWS_SECRET_KEY = '' #removing for GitHub
REGION_NAME = 'us-east-1'

# Initialize the necessary clients
sns_client = boto3.client('sns', aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY, region_name=REGION_NAME)
lambda_client = boto3.client('lambda', aws_access_key_id=AWS_ACCESS_KEY, aws_secret_access_key=AWS_SECRET_KEY, region_name=REGION_NAME)

# Create SNS topics for different alerts
health_issues_topic_arn = sns_client.create_topic(Name='HealthIssues')['TopicArn']
scaling_events_topic_arn = sns_client.create_topic(Name='ScalingEvents')['TopicArn']
high_traffic_topic_arn = sns_client.create_topic(Name='HighTraffic')['TopicArn']

print('SNS topics created successfully.')

# Lambda function code for sending notifications
lambda_code = """
import boto3

def lambda_handler(event, context):
    sns_client = boto3.client('sns')

    # Extract alert type from the event
    alert_type = event['alert_type']

    # Compose message based on alert type
    message = ''
    if alert_type == 'health_issues':
        message = 'Health issues detected in the system.'
    elif alert_type == 'scaling_events':
        message = 'Scaling events occurred in the system.'
    elif alert_type == 'high_traffic':
        message = 'High traffic detected in the system.'

    # Send notification via SNS
    sns_client.publish(
        TopicArn=event['topic_arn'],
        Subject='Alert: ' + alert_type.replace('_', ' ').title(),
        Message=message
    )
"""

# Create Lambda functions for sending notifications
for alert_type, topic_arn in [('health_issues', health_issues_topic_arn), ('scaling_events', scaling_events_topic_arn), ('high_traffic', high_traffic_topic_arn)]:
    response = lambda_client.create_function(
        FunctionName=alert_type + '_notification_function',
        Runtime='python3.8',
        Role='arn:aws:iam::your_account_id:role/AWSLambdaBasicExecutionRole',  
        Handler='lambda_function.lambda_handler',
        Code={'ZipFile': lambda_code.encode()},
        Timeout=30,
        Environment={
            'Variables': {
                'alert_type': alert_type,
                'topic_arn': topic_arn
            }
        }
    )

    print(f'Lambda function for {alert_type} notifications created successfully.')
